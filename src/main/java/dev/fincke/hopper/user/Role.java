package dev.fincke.hopper.user;

import jakarta.persistence.*;
import jakarta.validation.constraints.NotNull;
import org.hibernate.annotations.UuidGenerator;

import java.util.Objects;
import java.util.UUID;

// Entity mapped to "roles" table for user authorization
@Entity
@Table(
    name = "roles",
    indexes = {
        @Index(name = "idx_roles_name", columnList = "name")
    }
)
public class Role
{
    // * Attributes

    // UUID primary key (auto-generated by Hibernate)
    @Id
    @GeneratedValue
    @UuidGenerator
    private UUID id;

    // Role name from enum (required, unique, stored as string)
    @NotNull
    @Enumerated(EnumType.STRING)
    @Column(name = "name", nullable = false, unique = true, length = 20)
    private RoleType name;

    // Optional description of the role's purpose
    @Column(name = "description", length = 255)
    private String description;

    // * Constructors
    
    // Default constructor required by JPA
    protected Role() {}

    // Constructor for creating roles with name only
    public Role(RoleType name)
    {
        this.name = Objects.requireNonNull(name, "name");
    }

    // Constructor for creating roles with name and description
    public Role(RoleType name, String description)
    {
        this.name = Objects.requireNonNull(name, "name");
        this.description = description == null ? null : description.trim();
    }

    // * Getters and Setters
    
    // Role ID
    public UUID getId()
    {
        return id;
    }

    // Role ID (primarily used by JPA)
    public void setId(UUID id)
    {
        this.id = id;
    }

    // Role name
    public RoleType getName()
    {
        return name;
    }

    // Role name
    public void setName(RoleType name)
    {
        this.name = name;
    }

    // Role description
    public String getDescription()
    {
        return description;
    }

    // Role description (trims whitespace on set)
    public void setDescription(String description)
    {
        this.description = description == null ? null : description.trim();
    }

    // * Utility Methods

    // Check if this role has admin privileges
    public boolean isAdmin()
    {
        return name == RoleType.ADMIN;
    }

    // Check if this role is for API clients
    public boolean isApiClient()
    {
        return name == RoleType.API_CLIENT;
    }

    // Check if this role is a regular user
    public boolean isUser()
    {
        return name == RoleType.USER;
    }

    // * Overrides
    
    @Override
    public boolean equals(Object o)
    {
        if (this == o) return true;
        if (!(o instanceof Role other)) return false;
        // Two roles are equal if they have the same ID (ID-based equality for JPA entities)
        return id != null && id.equals(other.id);
    }

    @Override
    public int hashCode()
    {
        // Use ID for hash code, or 0 if not persisted yet
        return id != null ? id.hashCode() : 0;
    }

    @Override
    public String toString()
    {
        return "Role{" +
                "id=" + id +
                ", name=" + name +
                ", description='" + description + '\'' +
                '}';
    }
}